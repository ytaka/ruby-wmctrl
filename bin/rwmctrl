#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__) + '/../lib'))
$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__) + '/../ext'))
require 'wmctrl'
require 'optparse'

help_message =<<HELP
Usage: rwmctrl [options ...]
HELP

Version = WMCtrl::VERSION

options = {}
begin
  OptionParser.new(help_message) do |opt|
    opt.on('-l', 'List windows.') do |v|
      options[:mode] = :list_windows
    end
    opt.on('-p', 'Display PID of windows.') do |v|
      options[:pid] = true
    end
    opt.on('-x', 'Display class name or interpret <WIN> as the WM_CLASS name.') do |v|
      options[:class] = true
    end
    opt.on('-G', 'Display geometry of windows.') do |v|
      options[:geometry] = true
    end
    opt.on('-A', 'Mark active window.') do |v|
      options[:active] = true
    end
    opt.on('-E', 'Display corners of exterior frame of windows.') do |v|
      options[:exterior_frame] = true
    end
    opt.on('-e <MVARG>', String, 'Move and resize windows.') do |v|
      options[:mode] = :move_resize
      options[:move_resize] = v
    end
    opt.on('-r <WIN>', String, 'Specify target window.') do |v|
      options[:target] = v
    end
    opt.on('-c <WIN>', String, 'Close window.') do |v|
      options[:mode] = :close
      options[:target] = v
    end
    opt.on('-a <WIN>', String, 'Switch desktop and make the specified window active.') do |v|
      options[:mode] = :make_active
      options[:target] = v
    end
    opt.on('-d', 'List all desktops.') do |v|
      options[:mode] = :desktop
    end
    opt.on('-m', 'Show information of window manager.') do |v|
      options[:mode] = :wm_info
    end
    opt.on('-b STR', String, 'Change window properties. Format is (add|remove|toggle),prop1[,prop2]') do |v|
      options[:mode] = :change_state
      options[:change_state] = v
    end
    opt.on('-n N', Integer, 'Change the number of desktops.') do |v|
      options[:mode] = :change_number_of_desktops
      options[:arguments] = [v]
    end
    opt.on('-R <WIN>', String, 'Move <WIN> to the current desktop.') do |v|
      options[:mode] = :move_to_current
      options[:target] = v
    end
    opt.on('-t <DESK>', Integer, 'Move a window specified by -r to the desktop <DESK>.') do |v|
      options[:mode] = :move_to_desktop
      options[:desktop_number] = v
    end
    opt.on('-g SIZE', String, 'Change the geometry of all desktops. SIZE is the form w,h') do |v|
      options[:mode] = :change_geometry
      w, h = v.split(',').map(&:to_i)
      if w && h
        options[:arguments] = [w, h]
      else
        raise "Invalid argument"
      end
    end
    opt.on('-o SIZE', String, 'Change the viewport. SIZE is the form w,h') do |v|
      options[:mode] = :change_viewport
      w, h = v.split(',').map(&:to_i)
      if w && h
        options[:arguments] = [w, h]
      else
        raise "Invalid argument"
      end
    end
    opt.on('-N STR', String, 'Set long title of specified window.') do |v|
      options[:mode] = :set_title_long
      options[:arguments] = [v]
    end
    opt.on('-I STR', String, 'Set short title of specified window.') do |v|
      options[:mode] = :set_title_short
      options[:arguments] = [v]
    end
    opt.on('-T STR', String, 'Set long and short title of specified window.') do |v|
      options[:mode] = :set_title_both
      options[:arguments] = [v]
    end
    opt.on('-k ARG', String, 'Turn on or off "show the desktop". ARG is on or off.') do |v|
      options[:mode] = :showing_desktop
      if v == "on"
        options[:arguments] = [true]
      elsif v == "off"
        options[:arguments] = [false]
      else
        raise "Invalid argument"
      end
    end
    opt.on('-s <DESK>', Integer, 'Switch to the desktop <DESK>') do |v|
      options[:mode] = :switch_desktop
      options[:arguments] = [v]
    end
    # Not implemented options
    # '-w'

    # '-u'
    # '-v'
    opt.on('-i', 'Use window ID number as window argument.') do |v|
      options[:use_wid] = true
    end
    opt.on('-F', 'Use exact match of window title.') do |v|
      options[:use_exact] = true
    end
    opt.on('--ignore-case', 'Ignore case to specfy target window.') do |v|
      options[:ignore_case] = true
    end
    opt.parse!(ARGV)
  end
rescue OptionParser::InvalidOption
  $stderr.print <<MES
error: Invalid Option
#{help_message}
MES
  exit(2)
rescue OptionParser::InvalidArgument
  $stderr.print <<MES
error: Invalid Argument
#{help_message}
MES
  exit(2)
end

wm = WMCtrl.display

# Return first window specified by arg and options
def specify_window(arg, options)
  wm = WMCtrl.display
  win = nil
  if arg == ':ACTIVE:'
    win = wm.windows(:active => true).first
  elsif arg == ':SELECT:'
    raise 'Not implemented.'
  elsif options[:use_wid]
    win = wm.windows(:id => Integer(arg)).first
  else
    key_name = (options[:class] ? :class : :title)
    cond_title = (options[:use_exact] ? arg : Regexp.new(arg, options[:ignore_case] ? Regexp::IGNORECASE : 0))
    win = wm.windows(key_name => cond_title).first
  end
  unless win
    raise "Any window is not specified."
  end
  win
end

case options[:mode]
when :list_windows
  windows = wm.windows
  str_class_size = windows.map { |w| w[:class].to_s.size }.max
  windows.each do |win|
    s = ''
    if options[:active]
      s << (win[:active] ? "* " : "  ")
    end
    s << sprintf("0x%08x %2d ", win[:id], win[:desktop])
    if options[:pid]
      s << "%-7d" % (win[:pid] || 0)
    end
    if options[:geometry]
      s << win[:geometry].map { |n| "%-5d" % n}.join
    end
    if options[:exterior_frame]
      if win[:exterior_frame]
        s << win[:exterior_frame].map { |n| "%-5d" % n}.join
      else
        s << "N/A"
      end
    end
    if options[:class]
      s << sprintf("%*s ", -str_class_size, (win[:class] || "N/A"))
    end
    s << sprintf("%s %s", win[:client_machine] || "N/A", win[:title] || "N/A")
    puts s
  end
when :move_resize
  target_win = specify_window(options[:target], options)
  args = options[:move_resize].split(',').map(&:to_i)
  if args.size == 5
    wm.action_window(target_win[:id], :move_resize, *args)
  else
    puts "Invalid arguments."
  end
when :change_state
  target_win = specify_window(options[:target], options)
  args = options[:change_state].split(',')
  if args.size == 2 || args.size == 3
    target_win.change_state(*args)
  else
    puts "Invalid property string: #{args.inspect}"
  end
when :close
  specify_window(options[:target], options).close
when :make_active
  specify_window(options[:target], options).activate
when :desktop
  wm.list_desktops.each do |dt|
    printf("%d  %s DG: %dx%d  VP: %d,%d WA: %d,%d %dx%d  %s\n",
           dt[:id], dt[:current] ? '*' : '-', dt[:geometry][0], dt[:geometry][1], dt[:viewport][0], dt[:viewport][1],
           dt[:workarea][0], dt[:workarea][1], dt[:workarea][2], dt[:workarea][3], dt[:title])
  end
when :move_to_desktop
  wm.action_window(specify_window(options[:target], options)[:id], :move_to_desktop, options[:desktop_number])
when :move_to_current
  wm.action_window(specify_window(options[:target], options)[:id], :move_to_current)
when :change_number_of_desktops, :change_geometry, :change_viewport, :showing_desktop, :switch_desktop
  wm.__send__(options[:mode], *options[:arguments])
when :set_title_both, :set_title_short, :set_title_long
  wm.action_window(specify_window(options[:target], options)[:id], options[:mode], *options[:arguments])
when :wm_info
  info = wm.info
  puts "Name: #{info[:name]}"
  puts "Class: #{info[:class]}"
  puts "PID: #{info[:pid] ? info[:pid].to_s : "N/A"}"
  puts "Window manager's \"showing the desktop\" mode: #{info[:showing_desktop]}"
else
  puts "Not implemented."
  exit(1)
end
